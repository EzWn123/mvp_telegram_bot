import re
from enum import IntEnum, auto
from .types import InlineButton, KeyboardButton
from apiwrapper.models import Message


class States(IntEnum):
    START_STATE = auto()
    NAME_STATE = auto()
    BIRTHDAY_STATE = auto()
    AGE_STATE = auto()
    SEX_STATE = auto()
    NATIONALITY_STATE = auto()
    PHONE_STATE = auto()
    EMAIL_STATE = auto()
    PASSPORT_STATE = auto()
    MILITARY_CARD_STATE = auto()
    EDUCATION_STATE = auto()
    WAIT_STATE = auto()


class BaseState:
    state_id = None
    pattern = None
    next_state = None

    def ask(self, bot, api, event, user):
        pass

    def handle(self, bot, api, event, user):
        '''
        handle event
        and return next state
        '''
        return None


class StartState(BaseState):
    state_id = States.START_STATE
    pattern = '/start'

    def ask(self, bot, api, event, user):
        text = '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ "–ò–Ω–∂–µ–Ω–µ—Ä". </b>\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ <b>–¥–∞–ª–µ–µ</b>.'
        buttons = [
            InlineButton(text='–î–∞–ª–µ–µ', callback='next')
        ]
        bot.send_message(user.messenger_id, text, buttons=buttons)

    def handle(self, bot, api, event, user):
        if event.data == 'next':
            return NameState


class NameState(BaseState):
    state_id = States.NAME_STATE

    def ask(self, bot, api, event, user):
        text = '<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).</b>'
        bot.send_message(user.messenger_id, text)

    def handle(self, bot, api, event, user):
        full_name = event.data.split(' ')
        if len(full_name) >= 3:
            surname, name, second_name = full_name[0], full_name[1], full_name[2]
            if surname and name and second_name:
                user.surname = surname
                user.name = name
                user.second_name = second_name
                api.save_object(user)
                return BirthdayState
        else:
            text = '<b>–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>'
            bot.send_message(user.messenger_id, text)


class BirthdayState(BaseState):
    state_id = States.BIRTHDAY_STATE

    def ask(self, bot, api, event, user):
        text = '<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è \'dd.mm.yy\'</b>'
        bot.send_message(user.messenger_id, text)

    def handle(self, bot, api, event, user):
        if event.data:
            user.birthday = event.data
            api.save_object(user)
            return AgeState


class AgeState(BaseState):
    state_id = States.AGE_STATE

    def ask(self, bot, api, event, user):
        text = '<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.</b>'
        bot.send_message(user.messenger_id, text)

    def handle(self, bot, api, event, user):
        if event.data:
            user.age = event.data
            api.save_object(user)
            return SexState


class SexState(BaseState):
    state_id = States.SEX_STATE

    def ask(self, bot, api, event, user):
        text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª.</b>'
        buttons = [
            InlineButton(text='–ú—É–∂—Å–∫–æ–π', callback='man'),
            InlineButton(text='–ñ–µ–Ω—Å–∫–∏–π', callback='woman'),
        ]
        bot.send_message(user.messenger_id, text, buttons=buttons)

    def handle(self, bot, api, event, user):
        if event.data:
            user.sex = event.data
            api.save_object(user)
            return NationalityState


class NationalityState(BaseState):
    state_id = States.NATIONALITY_STATE

    def ask(self, bot, api, event, user):
        text = '<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.</b>'
        bot.send_message(user.messenger_id, text)

    def handle(self, bot, api, event, user):
        if event.data:
            user.nationality = event.data
            api.save_object(user)
            return PhoneState


class PhoneState(BaseState):
    state_id = States.PHONE_STATE

    def ask(self, bot, api, event, user):
        text = '<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</b>'
        bot.send_message(user.messenger_id, text)

    def handle(self, bot, api, event, user):
        if event.data:
            user.mobile_phone = event.data
            api.save_object(user)
            return EmailState


class EmailState(BaseState):
    state_id = States.EMAIL_STATE

    def ask(self, bot, api, event, user):
        text = '<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email.</b>'
        bot.send_message(user.messenger_id, text)

    def handle(self, bot, api, event, user):
        regex = '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
        if re.search(regex, event.data):
            user.email = event.data
            api.save_object(user)
            return PassportState
        else:
            text = '<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.</b>'
            bot.send_message(user.messenger_id, text)


class PassportState(BaseState):
    state_id = States.PASSPORT_STATE

    def ask(self, bot, api, event, user):
        text = '<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.</b>'
        bot.send_message(user.messenger_id, text)

    def handle(self, bot, api, event, user):
        if event.data:
            user.passport_data = event.data
            api.save_object(user)
            return MilitaryCardState


class MilitaryCardState(BaseState):
    state_id = States.MILITARY_CARD_STATE

    def ask(self, bot, api, event, user):
        text = '<b>–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç?</b>'
        buttons = [
            InlineButton(text='–î–∞', callback='yes'),
            InlineButton(text='–ù–µ—Ç', callback='no'),
        ]
        bot.send_message(user.messenger_id, text, buttons)

    def handle(self, bot, api, event, user):
        if event.data:
            user.military_card = event.data
            api.save_object(user)
            return EducationState


class EducationState(BaseState):
    states_id = States.EDUCATION_STATE

    def ask(self, bot, api, event, user):
        text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.</b>'
        buttons = [
            InlineButton(text='–í—ã—Å—à–µ–µ', callback='higher'),
            InlineButton(text='–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ',
                         callback='specialized_secondary'),
            InlineButton(text='–°—Ä–µ–¥–Ω–µ–µ', callback='average')
        ]
        bot.send_message(user.messenger_id, text, buttons)

    def handle(self, bot, api, event, user):
        if event.data:
            user.education = event.data
            api.save_object(user)
            return WaitState


class WaitState(BaseState):
    state_id = States.WAIT_STATE

    def ask(self, bot, api, event, user):
        text = '<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—èüòâ.</b>'
        bot.send_message(user.messenger_id, text)
